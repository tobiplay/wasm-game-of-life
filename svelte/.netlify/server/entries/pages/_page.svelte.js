import { c as create_ssr_component, e as escape, d as each, v as validate_component, f as add_attribute } from '../../chunks/index.js';

const fpsCounter_svelte_svelte_type_style_lang = '';

/* src/components/fpsCounter.svelte generated by Svelte v3.50.1 */

const css$1 = {
	code: ".svelte-1v74z29{justify-content:center;display:flex;font-family:monospace}",
	map: null
};

const FpsCounter = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	var min = 0;
	var max = 0;
	var mean = 0;
	var fps = NaN;

	// We need the current timestamp for the calculation of the FPS
	// via the delta later on.
	let lastFrameTimeStamp = performance.now();

	// We have to keep track of the last n frames in order
	// to calculate a mean, max and min.
	let frames = [];

	function renderFpsComponent() {

		// When comparing new potential max or min values to the current ones,
		// we ensure that they're indeed greater than the initial max, or
		// smaller than the inital min.
		min = Infinity;

		max = -Infinity;

		// Convert the delta time since the last frame render into a measure
		// of frames per second.
		const now = performance.now();

		// The delta time is the difference between now and the last frame, where
		// at the very beginning, right after construction of the element, the
		// last frame is the now from then.
		const delta = now - lastFrameTimeStamp;

		// Overwrite the last frame timestamp with the current one.
		lastFrameTimeStamp = now;

		// Calculate the FPS from the delta. This is done by taking the reciprocal
		// of the delta, which is the number of frames per millisecond, and then
		// multiplying by 1000 to get the number of frames per second.
		fps = 1 / delta * 1000;

		// Save only the latest 100 timings. We push the new timing onto the end
		// of the array, and then shift off the first element if the array is
		// longer than 100 elements.
		frames.push(fps);

		if (frames.length > 100) {
			frames.shift();
		}

		let sum = 0;

		// For each frame in the stack, we check if it is the new min or max,
		// might replace the old value with the new minimum or maximum, and add
		// it to the sum.
		for (let i = 0; i < frames.length; i++) {
			sum += frames[i];
			min = Math.min(frames[i], min);
			max = Math.max(frames[i], max);
		}

		// Calculate the mean FPS.
		mean = sum / frames.length;
	}

	if ($$props.renderFpsComponent === void 0 && $$bindings.renderFpsComponent && renderFpsComponent !== void 0) $$bindings.renderFpsComponent(renderFpsComponent);
	$$result.css.add(css$1);

	return `<p class="${"svelte-1v74z29"}">Frames per second: <br class="${"svelte-1v74z29"}">
  Latest: ${escape(Math.round(fps))} <br class="${"svelte-1v74z29"}">
  AVG of last 100 = ${escape(frames.length < 100 ? NaN : Math.round(mean))} <br class="${"svelte-1v74z29"}">
  MIN of last 100 = ${escape(frames.length < 100 ? NaN : Math.round(min))} <br class="${"svelte-1v74z29"}">
  MAX of last 100 = ${escape(frames.length < 100 ? NaN : Math.round(max))}
</p>`;
});

const _page_svelte_svelte_type_style_lang = '';

/* src/routes/+page.svelte generated by Svelte v3.50.1 */

const css = {
	code: "p.svelte-1ib8avd,form.svelte-1ib8avd,button.svelte-1ib8avd,h1.svelte-1ib8avd,div.svelte-1ib8avd{justify-content:center;display:flex}canvas.svelte-1ib8avd{margin:auto;display:flex}",
	map: null
};

const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let fpsComponent;
	let canvas;
	let ticksPerFrame = 1;
	let gridSize = 64;

	let universeOptions = [
		{ id: 0, text: 'Empty' },
		{ id: 1, text: 'Random' },
		{ id: 2, text: 'TwoSeven' }
	];

	let playPauseState = 'Pause';

	$$result.css.add(css);
	let $$settled;
	let $$rendered;

	do {
		$$settled = true;

		$$rendered = `<h1 class="${"svelte-1ib8avd"}">Conway&#39;s Game of Life</h1>
<p class="${"svelte-1ib8avd"}">Visit the <a style="${"margin-inline: .25em;"}" href="${"https://github.com/tobiplay/wasm-game-of-life"}">repository on GitHub</a> to read about the project.
</p>
<form class="${"svelte-1ib8avd"}"><label for="${"select-universe"}">Choose a starting universe:</label>
  <select name="${"select-universe"}" id="${"select-universe"}">${each(universeOptions, option => {
			return `<option${add_attribute("value", option, 0)}>${escape(option.text)}
      </option>`;
		})}</select></form>
<div class="${"svelte-1ib8avd"}"><button id="${"play-pause"}" class="${"svelte-1ib8avd"}">${escape(playPauseState)}</button>
  <button id="${"reset"}" class="${"svelte-1ib8avd"}">Reset</button></div>

${validate_component(FpsCounter, "Fps").$$render(
			$$result,
			{ this: fpsComponent },
			{
				this: $$value => {
					fpsComponent = $$value;
					$$settled = false;
				}
			},
			{}
		)}
<canvas class="${"svelte-1ib8avd"}"${add_attribute("this", canvas, 0)}></canvas>
<form class="${"svelte-1ib8avd"}"><label for="${"ticks-per-frame"}">Ticks per frame = ${escape(ticksPerFrame)}</label>
  <br>
  <input type="${"range"}" id="${"ticks-per-frame"}" min="${"1"}" max="${"10"}"${add_attribute("value", ticksPerFrame, 0)}></form>
<form class="${"svelte-1ib8avd"}"><label for="${"ticks-per-frame"}">Size of grid = ${escape(gridSize)}</label>
  <br>
  <input type="${"range"}" id="${"ticks-per-frame"}" min="${"16"}" max="${"224"}" step="${"16"}"${add_attribute("value", gridSize, 0)}>
</form>`;
	} while (!$$settled);

	return $$rendered;
});

export { Page as default };
